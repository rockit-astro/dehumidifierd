#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Dehumidifier control daemon"""

import argparse
import datetime
import sys
import threading
import traceback
import Pyro4
from rockit.common.helpers import pyro_client_matches
from rockit.common import log
from rockit.dehumidifier import Config, CommandStatus, DehumidifierMode, DehumidifierState
from rockit.power import SwitchStatus


class DehumidifierDaemon:
    """Daemon interface for a dehumidifier"""
    def __init__(self, config):
        self._config = config
        self._delay_condition = threading.Condition()
        self._current_lock = threading.Lock()

        self._current_date = datetime.datetime.now(datetime.timezone.utc)
        self._current_mode = DehumidifierMode.Automatic
        self._current_state = DehumidifierState.Disabled

        self._request_mode = DehumidifierMode.Automatic

        self._last_dome_query_failed = False

        run_thread = threading.Thread(target=self.__update_loop)
        run_thread.daemon = True
        run_thread.start()

    def __desired_state(self):
        """Check the dome and humidity sensors to determine what the desired dehumidifier state is"""
        # Force-disable the dehumidifier if the dome is open
        # If we can't determine the dome status we assume that it is closed
        try:
            with self._config.dome_daemon.connect() as daemon:
                dome_closed = daemon.status()[self._config.dome_closed_key]

            if self._last_dome_query_failed:
                log.info(self._config.log_name, 'Restored contact with dome daemon')

            self._last_dome_query_failed = False
            if not dome_closed:
                return DehumidifierState.DomeOpen
        except Exception:
            if not self._last_dome_query_failed:
                log.error(self._config.log_name, 'Lost contact with dome daemon')

            self._last_dome_query_failed = True

        try:
            with self._config.humidity_daemon.connect() as daemon:
                environment = daemon.last_measurement()

            # Ignore the humidity reading if it isn't valid
            if self._config.humidity_valid_key and self._config.humidity_valid_key in environment:
                if not environment[self._config.humidity_valid_key]:
                    if self._current_state != DehumidifierState.HumidityError:
                        log.error(self._config.log_name, 'Lost contact with humidity sensor')

                    return DehumidifierState.HumidityError

            if self._current_state == DehumidifierState.HumidityError:
                log.info(self._config.log_name, 'Restored contact with humidity sensor')

            # Implement hysteresis to avoid flickering on/off when humidity is on the limit
            limit = self._config.humidity_enable_limit
            if self._current_state == DehumidifierState.Enabled:
                limit = self._config.humidity_disable_limit

            humidity = environment[self._config.humidity_value_key]
            return DehumidifierState.Enabled if humidity > limit else DehumidifierState.Disabled

        except Exception:
            if self._current_state != DehumidifierState.HumidityError:
                log.error(self._config.log_name, 'Lost contact with humidity sensor')

            return DehumidifierState.HumidityError

    def __update_loop(self):
        """Background thread that polls shared memory for the current telescope status"""
        while True:
            with self._delay_condition:
                next_date = datetime.datetime.now(datetime.timezone.utc)
                next_mode = self._current_mode
                if self._request_mode != self._current_mode:
                    next_mode = self._request_mode
                    log.info(self._config.log_name, 'Changing control to ' + DehumidifierMode.label(next_mode))

                if next_mode == DehumidifierMode.Automatic:
                    next_state = self.__desired_state()
                    try:
                        success = True
                        with self._config.power_daemon.connect() as power:
                            current_value = power.value(self._config.power_switch)
                            current_enabled = current_value == SwitchStatus.On
                            next_enabled = next_state == DehumidifierState.Enabled

                            if next_enabled != current_enabled and current_value != SwitchStatus.Unknown:
                                label = 'on' if next_enabled else 'off'
                                success = power.switch(self._config.power_switch, next_enabled)
                                if success:
                                    if self._current_state == DehumidifierState.PowerError:
                                        log.error(self._config.log_name, 'Restored contact with power daemon')
                                    log.info(self._config.log_name, 'Switched dehumidifier ' + label)
                                else:
                                    next_state = DehumidifierState.PowerError
                                    if self._current_state != DehumidifierState.PowerError:
                                        log.error(self._config.log_name, 'Failed to switch dehumidifier ' + label)
                    except Exception:
                        traceback.print_exc(file=sys.stdout)
                        next_state = DehumidifierState.PowerError
                        if self._current_state != DehumidifierState.PowerError:
                            log.error(self._config.log_name, 'Lost contact with power daemon')
                else:
                    next_state = DehumidifierState.Disabled

                with self._current_lock:
                    self._current_mode = next_mode
                    self._current_date = next_date
                    self._current_state = next_state

                self._delay_condition.wait(self._config.query_delay)

    @Pyro4.expose
    def set_mode(self, mode):
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with self._delay_condition:
            self._request_mode = mode
            self._delay_condition.notify_all()

        return CommandStatus.Succeeded

    @Pyro4.expose
    def status(self):
        """Returns a dictionary containing the current dehumidifier status"""
        with self._current_lock:
            status = {
                'date': self._current_date.strftime('%Y-%m-%dT%H:%M:%SZ'),
                'mode': self._current_mode,
            }

            if self._current_mode == DehumidifierMode.Automatic:
                status['state'] = self._current_state

            return status


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Dehumidifier Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(DehumidifierDaemon(c))
