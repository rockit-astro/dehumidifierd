#!/usr/bin/env python3.6
#
# This file is part of dehumidifierd.
#
# dehumidifierd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# dehumidifierd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with dehumidifierd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for managing the dehumidifier"""

import datetime
import glob
import os
import sys
import Pyro4
from warwick.observatory.dehumidifier import Config, CommandStatus, DehumidifierMode, DehumidifierState

SCRIPT_NAME = os.path.basename(sys.argv[0])

sys.excepthook = Pyro4.util.excepthook


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'DEHUMIDIFIERD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['DEHUMIDIFIERD_CONFIG_PATH'])
    else:
        # Load the config file defined in the TELD_CONFIG_PATH environment variable or from the
        # default system location (/etc/teld/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/dehumidifierd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as DEHUMIDIFIERD_CONFIG_PATH=/path/to/config.json dehumidifier <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret not in (0, -1):
        print(CommandStatus.message(ret))
    return ret


def auto(config, _):
    """Set the dehumidifier to automatic control"""
    with config.daemon.connect(timeout=0) as dehumidifierd:
        return dehumidifierd.set_mode(DehumidifierMode.Automatic)


def manual(config, _):
    """Set the dehumidifier to manual control"""
    with config.daemon.connect(timeout=0) as dehumidifierd:
        return dehumidifierd.set_mode(DehumidifierMode.Manual)


def status(config, _):
    """Reports the current dehumidifier status"""
    try:
        with config.daemon.connect(timeout=0) as dehumidifierd:
            latest = dehumidifierd.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with dehumidifier daemon')
        return 1

    if latest is None:
        print('error: no data available')
        return 1

    date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
    print('Data received \033[1m{}\033[0m:'.format(date))
    print('   Mode: ' + DehumidifierMode.label(latest['mode'], True))
    if latest['mode'] == DehumidifierMode.Automatic:
        print('  State: ' + DehumidifierState.label(latest['state'], True))

    return 0


def print_usage():
    """Prints the utility help"""
    print('usage: {} <command>'.format(SCRIPT_NAME))
    print()
    print('   auto      dehumidifier is automatically controlled')
    print('   manual    dehumidifier is manually controlled using power commands')
    print()

    return 0


if __name__ == '__main__':
    commands = {
        'auto': auto,
        'manual': manual,
        'status': status,
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
